
/*----FUNCTION-----------------------------------------------------------------
 * 
 *  Description:  Calvin Maurer's EDT (Euclidean DistanceTransform): 
 *
 * REFERENCE
 *  Paper: Calvin Maurer et. al. PAMI feb. 2003 
 *
 *  Implementation "inspired" in the LTI lib:
 *    http://ltilib.sourceforge.net
 *  
 *  Distances are calculated only where pixels are equal to 1
 *
 * - PARAMETER ----------------------------------------------------------------
 *      Mode   Type             Name            Description
 * ----------------------------------------------------------------------------
 *    in-out:  ImgPUInt32         im            binary image on input;
 *                                              grayscale on output, with
 *                                              squared distance transform.
 *----------------------------------------------------------------------------*/

#include "maurer2003.h"
#include "common.h"
#include <math.h>

int edt_optimized_1d_vertical(Img *im)
{
   int   rows=im->rows, r,
         cols=im->cols, c;
   int b;
   for (c=0; c < cols; c++) {
      b=1;
      for (r=1; r<rows; r++)
         if (RC(im,r,c) > RC(im,r-1,c) + b) {
            RC(im,r,c) = RC(im,r-1,c) + b;
            b += 2;
         } else
		 {
            b = 1;
		 }
      b=1;
      for (r=rows-2; r >= 0; r--) {
         if (RC(im,r,c) > RC(im,r+1,c) + b) {
            RC(im,r,c) = RC(im,r+1,c) + b;
            b += 2;
         } else
            b = 1;
      }
		/*int b=-1;
		for (r=0;r<rows;r++)
		{
			if (RC(im,r,c)==0)
			{
				int e = r,s=1;
				while(1)
				{
					b++;
					e--;
					if (b>e) break;
					RC(im,b,c) = RC(im,b-1,c) + s;
					RC(im,e,c) = RC(im,e+1,c) + s;
					s+=2;
				}
				b=r;
			}
		}

		int e = r,s=1;
		while(1)
		{
			b++;
			e--;
			if (b>e) break;
			RC(im,b,c) = RC(im,b-1,c) + s;
			RC(im,e,c) = RC(im,e+1,c) + s;
			s+=2;
		}*/
   }
   /* NOTE: Lotufo's implementation (obtained by requesting him) of this first 
    * part  is much less readable. Although pointers could be used more 
    * efficiently, this first part is much faster than the 2nd part and is not 
    * worth optimizing.  So I kept it readable, close to the paper's pseudocode.  
    */

   return 0;
}



int edt_optimized_calculate_link(Img *im)
{
	return 0;
}

int edt_optimized_maurer_2D_from_1D(Img *im);
int num=0;
int
edt_optimized_maurer2003(Img *im)
{
   char *fname="edt_maurer2003";
   int i,r,c;
   int stat;
   int infty;

   //assert(im->isbinary);
   r = im->rows; c = im->cols;
   infty = MAXINT - r*r - c*c;
   for (i=0; i < r*c; i++)
      if (im->data[i] == FG)
         im->data[i] = infty;

   // Vertical columnwise EDT
   stat = edt_optimized_1d_vertical(im);

   stat = edt_optimized_calculate_link(im);

   // Lotufo's 1D EDT is equivalent to Maurer's D1.
   // There is a remark in section 5 of Maurer's paper that says
   // D1 can be calculated using a routine like this.
   //CHECK_RET_STATUS(false);
   stat = edt_optimized_maurer_2D_from_1D(im);      
   //CHECK_RET_STATUS(false);
//printf("%d\n",num);
   //im->isbinary = false;
   return 0;
}

int optimized_maurer_voronoi_edt_2D(Img *im, int *im_row, int *g, int h);

int
edt_optimized_maurer_2D_from_1D(Img *im)
{
   int stat;
   int i1, *g, *h; // same naming as in the paper
   char *fname="edt_maurer_2D_from_1D";

   int ncols = im->cols;
   int nrows = im->rows;

   // Call voronoi_edt_2D for every row.
   // OBS: g and h are internal to maurer_voronoi_edt_2d and are
   // pre-allocated here for efficiency.
   g = (int*)malloc(sizeof(int)*ncols);
	   /*animal_malloc_array(int, ncols);
       if (!g) {
          animal_err_flush_trace();                                
          animal_err_register(fname, ANIMAL_ERROR_MALLOC_FAILED,"");  
          return false;                                          
       } */                                                       
   h = (int*)malloc(sizeof(int)*ncols);
	   /*animal_malloc_array(int, ncols);
       if (!h) {
          animal_err_flush_trace();                                
          animal_err_register(fname, ANIMAL_ERROR_MALLOC_FAILED,"");  
          return false;                                          
       } */                                                       


   int *im_row;
   im_row = im->data;

   for (i1=0; i1 < nrows; ++i1, im_row += ncols) {
      stat = optimized_maurer_voronoi_edt_2D(im, im_row,  /* internal: */ g, i1);
      //CHECK_RET_STATUS(false);
   }

   free(g); free(h);

   return 1;
}

int remove_edt(int du, int dv, int dw, 
                      int u,  int v,  int w);

int mySqrt(int x)
{
	return (int)sqrt(x+1e-8) ; 
}

int getNearestPoint(Img *im,int *im_row,int x,int bx,int ex)
{
	int r,c,ans=-1,minDis;
	r=im->rows;
	c=im->cols;
	int infty = MAXINT - r*r - c*c;
	minDis = infty;
	int rad = infty;
	int k = 0;
	if (x<bx) k = bx-x;
	if (x>ex) k = x-ex;
	int kk=k*k;
	int lb=bx,rb=ex;
	while (1)
	{
		int f = 0;
		if (x+k<=rb)
		{
			f=1;
			int dis1 = im_row[x+k] + kk;
			if (dis1<minDis)
			{
				minDis = dis1;
				ans = x+k;
				rad = sqrt(dis1);
				rb = x+rad<ex?x+rad:ex;
				lb = x-rad>bx?x-rad:bx;
			}
		}
		if (x-k>=lb) 
		{
			f=1;
			int dis2 = im_row[x-k] + kk;
			if (dis2<minDis)
			{
				minDis = dis2;
				ans = x-k;
				rad = sqrt(dis2);
				rb = x+rad<ex?x+rad:ex;
				lb = x-rad>bx?x-rad:bx;
			}
		}
		kk=kk+2*k+1;
		k++;
		if (f==0) break;
	}
	return ans ;
}
/*
   void binaryCalculate(Img *im,int *im_row,int b,int bx,int e,int ex,int *g,int h)
   {
   int c = im->cols;
   int r = im->rows;
   int midL = (b+e)/2;
   int midR = midL + 1;
   if (b==e||b+1==e) return ;
//if (b!=e)
if (b!=midL)
{
int midLx = getNearestPoint(im,im_row,midL,bx,ex);
int dis = (midLx - midL)*(midLx - midL) + im_row[midLx];
if (midLx == bx)
{
for (int i=b+1;i<=midL;i++) g[i] = (midLx - i)*(midLx - i) + im_row[midLx];
}
else 
{
g[midL] = dis;
binaryCalculate(im,im_row,b,bx,midL,midLx,g,h);
}
}

//if (midR>=e) return ;
if (midR==e) return ;
int midRx = getNearestPoint(im,im_row,midR,bx,ex);
int dis = (midRx - midR)*(midRx-midR) + im_row[midRx];
if (midRx == ex)
{
for (int i=midR;i<=e-1;i++) g[i]=(midRx - i)*(midRx - i) + im_row[midRx];
}
else 
{
g[midR] = dis;
binaryCalculate(im,im_row,midR,midRx,e,ex,g,h);
}
}
*/

void check(Img *im,int *im_row,int x,int xx)
{
	int c = im->cols;
	int mxdis = 2000000000;int k ;
	for (int i=0;i<c;i++)
	{
		int dis =  im_row[i]+(i-x)*(i-x);
		if (mxdis>dis)
		{
			mxdis = dis;
			k = i;
		}
	}
	int dis1 = im_row[xx]+(xx-x)*(xx-x);
	if (dis1>mxdis)
	{
		printf("%d is %d  not %d\n",x,k,xx);
	}
}

void binaryCalculate(Img *im,int *im_row,int ib,int ibx,int ie,int iex,int *g,int h)
{
	int c = im->cols;
	int r = im->rows;
	int sck[20][5];
	int st=0;
	sck[st][0]=ib;
	sck[st][1]=ibx;
	sck[st][2]=ie;
	sck[st][3]=iex;
	sck[st][4]=0;
	st++;
	while (st>=1)
	{
		int b=sck[st-1][0];
		int bx=sck[st-1][1];
		int e=sck[st-1][2];
		int ex=sck[st-1][3];
		int ip=sck[st-1][4];
		if (ip==0)
		{
			int midL=(b+e)/2;
			if (b<midL)
			{
				int midLx = getNearestPoint(im,im_row,midL,bx,ex);
				
//				check(im,im_row,midL,midLx);

				int dis = (midLx - midL)*(midLx - midL) + im_row[midLx];
				if (midLx == bx)
				{
					for (int i=b+1;i<=midL;i++) 
						g[i] = (midLx - i)*(midLx - i) + im_row[midLx];
					num+=midL-b;
					sck[st-1][4]++;
				}
				else 
				{
					g[midL] = dis;
					//binaryCalculate(im,im_row,b,bx,midL,midLx,g,h);
					
					sck[st][0]=b;
					sck[st][1]=bx;
					sck[st][2]=midL;
					sck[st][3]=midLx;
					sck[st][4]=0;
					sck[st-1][4]++;
					st++;
					continue;
				}
			}
		}

		if (ip==1||ip==0)
		{
			int midR = ((b+e)/2) + 1;
			if (midR<e)
			{
				int midRx = getNearestPoint(im,im_row,midR,bx,ex);
//				check(im,im_row,midR,midRx);
				int dis = (midRx - midR)*(midRx-midR) + im_row[midRx];
				if (midRx == ex)
				{
					for (int i=midR;i<=e-1;i++) 
						g[i]=(midRx - i)*(midRx - i) + im_row[midRx];
					num+=e-midR;
					sck[st-1][4]++;
				}
				else 
				{
					g[midR] = dis;
					//binaryCalculate(im,im_row,midR,midRx,e,ex,g,h);

					sck[st][0]=midR;
					sck[st][1]=midRx;
					sck[st][2]=e;
					sck[st][3]=ex;
					sck[st][4]=0;
					sck[st-1][4]++;
					st++;
					continue;
				}
			}
		}
		st--;
	}
}


int
optimized_maurer_voronoi_edt_2D(Img *im, int *im_row, int *g, int h)
{
	int l, i, ns, tmp0, tmp1, tmp2, r,c;
	int infty, fi;

	r = im->rows; c=im->cols;
	infty = MAXINT - r*r - c*c;
	int b=0,e=c-1;
	int bx = getNearestPoint(im,im_row,b,b,e);
	//check(im,im_row,b,bx);
	int ex = getNearestPoint(im,im_row,e,b,e);
	//check(im,im_row,e,ex);
	int disb = (bx-b)*(bx-b) + im_row[bx];
	int dise = (ex-e)*(ex-e) + im_row[ex];
	//for (i=0;i<c;i++) g[i]=-1;
	g[b] = disb;
	g[e] = dise;
	binaryCalculate(im,im_row,b,bx,e,ex,g,h);
	/*for (i=0;i<c;i++)
	{
		int tmpx = getNearestPoint(im,im_row,i,bx,ex);
		g[i] = im_row[tmpx] + (i-tmpx)*(i-tmpx);
	}*/
	for (i=0;i<c;i++) 	
	{
	//	if (g[i]==-1) printf("%d\n",i);
		im_row[i]=g[i];
	}
	/*
	   l = -1;
	   for (i=0; i < c; ++i){
	   if ((fi = im_row[i]) != infty) {
	   while ( l >= 1 && remove_edt(g[l-1], g[l], fi, h[l-1], h[l], i) )
	   --l;
	   ++l; g[l] = fi; h[l] = i;
	   }
	   }

	// The following are lines 15-25 of the article
	if ((ns=l) == -1) return 1;

	l = 0;
	tmp0 = h[l] ;
	tmp1 = g[l] + tmp0*tmp0;
	while(1)
	{
	if (l>=ns) break;
	tmp2 = h[l+1] ;
	if (tmp1<=g[l+1]+tmp2*tmp2) break;
	++l;
	tmp0 = h[l];
	tmp1 = g[l] + tmp0*tmp0;
	}
	im_row[0] = tmp1 ;
	for (i=1; i < c; ++i) {
	//tmp0 = h[l] - i;
	//tmp1 = g[l] + tmp0*tmp0;
	tmp1 = tmp1 - (tmp0<<1) + 1 ;
	tmp0 = h[l]-i;
	while(1) {
	if (l >= ns) break;

	tmp2 = h[l+1] - i;

	if (tmp1 <= g[l+1] + tmp2*tmp2) break;

	++l;
	tmp0 = h[l] - i;
	tmp1 = g[l] + tmp0*tmp0;
	}

	im_row[i] = tmp1;
	}
	*/
	return 1;
}


